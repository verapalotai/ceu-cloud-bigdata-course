install.packages(c("caesar", "PKI"))
install.packages("caesar")
library(caesar)
caesar("Hello", shift=1)
coded = caesar("Hello", shift=1)
decoded = caesar(coded, shift=-1)
(decoded = caesar(coded, shift=-1))
decoded = caesar(coded, shift=-1)
library(PKI)
install.packages(base64enc)
install.packages('base64enc')
install.packages("base64enc")
library(PKI)
key <- PKI.genRSAkey()
prv_key = PKI.save.key(key, private=TRUE)
prv_key
pub_key = PKI.save.key(key, private = FALSE)
# public key gen
key <- PKI.genRSAkey()
pub_key = PKI.save.key(key, private = FALSE)
pub_key
# private key generation
key <- PKI.genRSAkey()
prv_key_pem = PKI.save.key(key, private=TRUE)
# public key gen
key <- PKI.genRSAkey()
pub_key_pem = PKI.save.key(key, private = FALSE)
pub_key = PKI.load.key(pub_key_pem)
prv_key = PKI.load.key(prv_key_pem)
prv_key
pub_key
C = charToRaw("Hello, RSA")
C
PKI.encrypt(C, pub_key)
h = "Hello"
utf8ToInt(h)
sum(utf8ToInt(h))
h = "Hello World"
sum(utf8ToInt(h))
sum(utf8ToInt(h)) %% 100
install.packages('digest')
library(digest)
digest(h, algo = "sha256") # gets an object and can hash it in multiple ways
#algo = sha256: returns a hexadecimal code
16^nchar(d)
d = digest(h, algo = "sha256") # gets an object and can hash it in multiple ways
#algo = sha256: returns a hexadecimal code
16^nchar(d)
my_key <- PKI.genRSAkey()
my_pub_key <- PKI.save.key(key, private = TRUE)
my_prv_key <- PKI.save.key(key, private = FALSE)
my_pub_key
my_prv_key
# Save the keys to a file, then load them back
write(my_pub_key, file="id_rsa.pub") # Save Public key
write(my_prv_key, file="id_rsa")     # Save Private key
my_pub_key_loaded <- scan("id_rsa.pub", what='list', sep='\n') # Load
my_prv_key_loaded <- scan("id_rsa", what='list', sep='\n') # Load
pub_manila_pem_loaded <- scan("id_rsa_manila.pub", what='list', sep='\n') # Load
# Extract the key objects from the PEM file
pub_manila_loaded <- PKI.load.key(pub_manila_pem_loaded)
pub_manila_loaded
pub_manila_pem_loaded
# Encrypt with the public
bytes.to.encode = charToRaw("I hope it works :D")
encrypted <- PKI.encrypt(bytes.to.encode, pub_manila_loaded)
print(encrypted)
write(encrypted, file="secret_message")
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted.message, outf)
close(outf)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
inf <- file("encodeddata_manila", "rb")
readBin(inf, what="raw", n=1000)
inf <- file("encodeddata_manila.bin", "rb")
readBin(inf, what="raw", n=1000)
close(inf)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(inf, my_prv_key))
inf <- file("encodeddata_manila.bin", "rb")
encrypted <- readBin(inf, what="raw", n=1000)
close(inf)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(decrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
inf <- file("encodeddata_manila.bin", "rb")
encrypted <- readBin(inf, what="raw", n=1000)
close(inf)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(decrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(encrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(decrypted)
my_pub_key_pem <- PKI.save.key(key, private = TRUE)
my_prv_key_pem <- PKI.save.key(key, private = FALSE)
my_pub_key_pem
my_prv_key_pem
my_pub_key = PKI.load.key(my_pub_key_pem)
my_prv_key = PKI.load.key(my_prv_key_pem)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(decrypted)
# Save the keys to a file, then load them back
write(my_pub_key, file="id_rsa.pub") # Save Public key
write(my_prv_key, file="id_rsa")     # Save Private key
my_pub_key_loaded <- scan("id_rsa.pub", what='list', sep='\n') # Load
my_prv_key_loaded <- scan("id_rsa", what='list', sep='\n') # Load
# Save the keys to a file, then load them back
write(my_pub_key_pem, file="id_rsa.pub") # Save Public key
write(my_prv_key_pem, file="id_rsa")     # Save Private key
my_pub_key_loaded <- scan("id_rsa.pub", what='list', sep='\n') # Load
my_prv_key_loaded <- scan("id_rsa", what='list', sep='\n') # Load
pub_manila_pem_loaded <- scan("id_rsa_manila.pub", what='list', sep='\n') # Load
# Extract the key objects from the PEM file
pub_manila_loaded <- PKI.load.key(pub_manila_pem_loaded)
pub_manila_pem_loaded
# Encrypt with the public
bytes.to.encode = charToRaw("I hope it works :D")
encrypted <- PKI.encrypt(bytes.to.encode, pub_manila_loaded)
print(encrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
inf <- file("encodeddata_manila.bin", "rb")
encrypted <- readBin(inf, what="raw", n=1000)
close(inf)
print(encrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted, my_prv_key))
print(decrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
# Encrypt with the public
bytes.to.encode = charToRaw("I hope it works :D")
encrypted <- PKI.encrypt(bytes.to.encode, pub_manila_loaded)
print(encrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
inf <- file("encodeddata_manila.bin", "rb")
encrypted_manila <- readBin(inf, what="raw", n=1000)
close(inf)
print(encrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted_manila, my_prv_key))
print(decrypted)
# Encrypt with the public
bytes.to.encode = charToRaw("I hope it works :D")
encrypted <- PKI.encrypt(bytes.to.encode, my_pub_key)
print(encrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
encrypted <- PKI.encrypt(bytes.to.encode, my_prv_key)
print(encrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
inf <- file("encodeddata_manila.bin", "rb")
encrypted_manila <- readBin(inf, what="raw", n=1000)
close(inf)
print(encrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted_manila, pub_manila_loaded))
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted_manila, pub_manila_loaded))
print(decrypted)
inf <- file("encodeddata_manila.bin", "rb")
encrypted_manila <- readBin(inf, what="raw", n=1000)
close(inf)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted_manila, pub_manila_loaded))
print(decrypted)
# Extract the key objects from the PEM file
pub_manila_loaded <- PKI.load.key(pub_manila_pem_loaded)
pub_manila_pem_loaded
# Encrypt with the public
bytes.to.encode = charToRaw("I hope it works :D")
encrypted <- PKI.encrypt(bytes.to.encode, my_prv_key)
print(encrypted)
outf <- file("encodeddata.bin","wb")
writeBin(encrypted, outf)
close(outf)
inf <- file("encodeddata_manila.bin", "rb")
encrypted_manila <- readBin(inf, what="raw", n=1000)
close(inf)
print(encrypted)
# Decrypt with the private key
decrypted <- rawToChar(PKI.decrypt(encrypted_manila, pub_manila_loaded))
print(decrypted)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df1 <- read_csv("test-data1.csv") # You have to fix this
df2 <- read_csv("test-data2.csv")
df3 <- read_csv("test-data3.csv")
df1 <- read_csv("test-data1.csv") # You have to fix this
df1
df2 <- read_csv("test-data2.csv")
df1
df1 <- read_csv("test-data1.csv", header=FALSE) # You have to fix this
df1 <- read_csv2("test-data1.csv", header=FALSE) # You have to fix this
?read_csv
df1 <- read_csv2("test-data1.csv", col_names=FALSE) # You have to fix this
df1
df1 <- read_csv2("test-data1.csv", delim=',',col_names=FALSE) # You have to fix this
df1
df1 <- read_csv2("test-data1.csv", delim=',' ,col_names=FALSE) # You have to fix this
df1 <- read_csv2("test-data1.csv", ',' ,col_names=FALSE) # You have to fix this
df1
df1 <- read_csv2("test-data1.csv", delim ,col_names=FALSE) # You have to fix this
# Your final command should be of this kind:
# df1 <- read_csv("test-data1.csv", col_types = cols(...))
delim = ','
df1 <- read_csv2("test-data1.csv", delim ,col_names=FALSE) # You have to fix this
df1
df1 <- read_csv2("test-data1.csv", delim ,col_names=FALSE) # You have to fix this
df1 <- read_csv2("test-data1.csv", delim , quote, col_names=FALSE) # You have to fix this
# Your final command should be of this kind:
# df1 <- read_csv("test-data1.csv", col_types = cols(...))
delim = ','
quote = ""
df1 <- read_csv2("test-data1.csv", delim , quote, col_names=FALSE) # You have to fix this
df1 <- read_csv2("test-data1.csv", col_names=FALSE, col_types = cols(
col_double(),
col_double(),
col_double(),
col_character(),
col_logical()
)) # You have to fix this
df1 <- read_csv("test-data1.csv", col_names=FALSE,
col_types = cols(
col_double(),
col_double(),
col_double(),
col_character(),
col_logical()
)) # You have to fix this
df2 <- read_csv("test-data2.csv")
df2
df2 <- read_csv("test-data2.csv")
df2 <- read_csv("test-data2.csv", col_types = cols(
name = col_character(),
id = col_character(),
gender = col_character()
))
df2
df3 <- read_csv("test-data3.csv")
df3 <- read_csv("test-data3.csv", col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
))
df3
df3 <- read_csv("test-data3.csv", col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
))
df3 <- read_csv("test-data3.csv", col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
))
df3 <- read_csv("test-data3.csv", col_names = TRUE, col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
))
df3 <- read_csv("test-data3.csv", col_names = TRUE, col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
), check.names=FALSE)
df3 <- read_csv("test-data3.csv", col_names = TRUE, col_types = cols(
amound = col_double(),
also_amound = col_double(),
who_knows = col_double(),
name = col_character(),
has_passed = col_logical()
))
df3
df2 <- read_csv("test-data2.csv", col_types = cols(
name = col_character(),
id = col_integer(),
gender = col_character()
))
character()
df2 <- read_csv("test-data2.csv", na = c("."))
df2
head(df3)
tail(df3)
tail(read.csv("test-data3.csv", col_types="ccccc"))
tail(read.csv("test-data3.csv", col_types="ccccc"))
tail(df3)
tail(read.csv("test-data3.csv", col_types="ccccc"))
tail(read_csv("test-data3.csv", col_types="ccccc"))
df3 <- read_csv("test-data3.csv", col_names = TRUE, col_types = "ccccc")
head(df3)
tail(df3)
tail(read_csv("test-data3.csv", col_types="ccccc"))
library(tidyverse)
table4a # This is defined
tidy4a <-  table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
install.packages(base64enc)
?gather
table4a # This is defined
tidy4a <-  table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
tidy4a
tidy4b
tidy4b <- table4b %>%
gather(`1999`, `2000`, key = "year", value = "population")
tidy4b
# We will see more on joins in the coming weeks
tidy4 <- left_join(tidy4a, tidy4b)
tidy4
table2 %>%
spread(key = "type", value = "count")
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
stocks %>%
spread(key = year, value = return) %>%
gather(key = "year", value = "return", `2015`, `2016`)
?append
stocks %>%
spread(key = year, value = return) %>%
rename(first_half = '1', second_half = '2')
stocks %>%
spread(key = year, value = return) %>%
rename(first_half = `1`, second_half = `2`)
stocks %>%
spread(key = half, value = return) %>%
rename(first_half = `1`, second_half = `2`)
